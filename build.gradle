buildscript {
	ext {
		springBootVersion = '1.4.1.RELEASE'
	}
	repositories {
		mavenCentral()
		maven {
			url "https://plugins.gradle.org/m2/"
		}
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
		classpath("com.moowork.gradle:gradle-node-plugin:0.13")
		classpath('se.transmode.gradle:gradle-docker:1.2')
	}
}

group = 'spring-boot'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'spring-boot'
apply plugin: 'com.moowork.node'
apply plugin: 'docker'

jar {
	baseName = 'demo-djt'
	version = '0.0.1'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	mavenCentral()
}

configurations.all {
	resolutionStrategy.eachDependency { DependencyResolveDetails details ->
		if (details.requested.name == 'log4j') {
			details.useTarget 'log4j:log4j:1.2.+'
		}
	}
	exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	exclude group: 'org.springframework.boot', module: 'logback-classic'
}

dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	compile('org.springframework.boot:spring-boot-starter-data-jpa')
	compile('org.springframework.boot:spring-boot-starter-websocket')
	compile('org.apache.spark:spark-core_2.11:2.0.1')
	compile('com.h2database:h2')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

node {
	version = '5.0.0'
	download = true
	nodeModulesDir = file("${project.projectDir}/src/main/resources/web")
}

processResources.dependsOn npm_install

task buildDocker(type: Docker, dependsOn: build) {
	push = true
	applicationName = jar.baseName
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			into stageDir
		}
	}
}